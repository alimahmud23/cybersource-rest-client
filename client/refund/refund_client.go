// Code generated by go-swagger; DO NOT EDIT.

package refund

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new refund API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for refund API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RefundCapture(params *RefundCaptureParams, opts ...ClientOption) (*RefundCaptureCreated, error)

	RefundPayment(params *RefundPaymentParams, opts ...ClientOption) (*RefundPaymentCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RefundCapture refunds a capture

  Refund a capture API is only used, if you have requested Capture independenlty using [/pts/v2/payments/{id}/captures](https://developer.cybersource.com/api-reference-assets/index.html#payments_capture) API call. Include the capture ID in the POST request to refund the captured amount.

*/
func (a *Client) RefundCapture(params *RefundCaptureParams, opts ...ClientOption) (*RefundCaptureCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefundCaptureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refundCapture",
		Method:             "POST",
		PathPattern:        "/pts/v2/captures/{id}/refunds",
		ProducesMediaTypes: []string{"application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefundCaptureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefundCaptureCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refundCapture: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefundPayment refunds a payment

  Refund a Payment API is only used, if you have requested Authorization and Capture together in [/pts/v2/payments](https://developer.cybersource.com/api-reference-assets/index.html#payments_payments) API call. Include the payment ID in the POST request to refund the payment amount.

*/
func (a *Client) RefundPayment(params *RefundPaymentParams, opts ...ClientOption) (*RefundPaymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefundPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refundPayment",
		Method:             "POST",
		PathPattern:        "/pts/v2/payments/{id}/refunds",
		ProducesMediaTypes: []string{"application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefundPaymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefundPaymentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refundPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
