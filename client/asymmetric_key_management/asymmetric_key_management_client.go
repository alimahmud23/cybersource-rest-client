// Code generated by go-swagger; DO NOT EDIT.

package asymmetric_key_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new asymmetric key management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for asymmetric key management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateP12Keys(params *CreateP12KeysParams, opts ...ClientOption) (*CreateP12KeysCreated, error)

	DeleteBulkP12Keys(params *DeleteBulkP12KeysParams, opts ...ClientOption) (*DeleteBulkP12KeysOK, error)

	GetP12KeyDetails(params *GetP12KeyDetailsParams, opts ...ClientOption) (*GetP12KeyDetailsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateP12Keys creates one or more p k c s 12 keys

  'Create one or more PKCS#12 keys'

*/
func (a *Client) CreateP12Keys(params *CreateP12KeysParams, opts ...ClientOption) (*CreateP12KeysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateP12KeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createP12Keys",
		Method:             "POST",
		PathPattern:        "/kms/v2/keys-asym",
		ProducesMediaTypes: []string{"application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateP12KeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateP12KeysCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createP12Keys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBulkP12Keys deletes one or more p k c s 12 keys

  'Delete one or more PKCS#12 keys'

*/
func (a *Client) DeleteBulkP12Keys(params *DeleteBulkP12KeysParams, opts ...ClientOption) (*DeleteBulkP12KeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBulkP12KeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBulkP12Keys",
		Method:             "POST",
		PathPattern:        "/kms/v2/keys-asym/deletes",
		ProducesMediaTypes: []string{"application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBulkP12KeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBulkP12KeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBulkP12Keys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetP12KeyDetails retrieves p k c s 12 key details

  Retrieves keys details by providing the key id.
*/
func (a *Client) GetP12KeyDetails(params *GetP12KeyDetailsParams, opts ...ClientOption) (*GetP12KeyDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetP12KeyDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getP12KeyDetails",
		Method:             "GET",
		PathPattern:        "/kms/v2/keys-asym/{keyId}",
		ProducesMediaTypes: []string{"application/hal+json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetP12KeyDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetP12KeyDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getP12KeyDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
