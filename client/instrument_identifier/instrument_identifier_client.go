// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new instrument identifier API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for instrument identifier API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteInstrumentIdentifier(params *DeleteInstrumentIdentifierParams, opts ...ClientOption) (*DeleteInstrumentIdentifierNoContent, error)

	GetInstrumentIdentifier(params *GetInstrumentIdentifierParams, opts ...ClientOption) (*GetInstrumentIdentifierOK, error)

	GetInstrumentIdentifierPaymentInstrumentsList(params *GetInstrumentIdentifierPaymentInstrumentsListParams, opts ...ClientOption) (*GetInstrumentIdentifierPaymentInstrumentsListOK, error)

	PatchInstrumentIdentifier(params *PatchInstrumentIdentifierParams, opts ...ClientOption) (*PatchInstrumentIdentifierOK, error)

	PostInstrumentIdentifier(params *PostInstrumentIdentifierParams, opts ...ClientOption) (*PostInstrumentIdentifierOK, *PostInstrumentIdentifierCreated, error)

	PostInstrumentIdentifierEnrollment(params *PostInstrumentIdentifierEnrollmentParams, opts ...ClientOption) (*PostInstrumentIdentifierEnrollmentAccepted, *PostInstrumentIdentifierEnrollmentNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteInstrumentIdentifier deletes an instrument identifier
*/
func (a *Client) DeleteInstrumentIdentifier(params *DeleteInstrumentIdentifierParams, opts ...ClientOption) (*DeleteInstrumentIdentifierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstrumentIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInstrumentIdentifier",
		Method:             "DELETE",
		PathPattern:        "/tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstrumentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInstrumentIdentifierNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInstrumentIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstrumentIdentifier retrieves an instrument identifier
*/
func (a *Client) GetInstrumentIdentifier(params *GetInstrumentIdentifierParams, opts ...ClientOption) (*GetInstrumentIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstrumentIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstrumentIdentifier",
		Method:             "GET",
		PathPattern:        "/tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstrumentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstrumentIdentifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstrumentIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstrumentIdentifierPaymentInstrumentsList lists payment instruments for an instrument identifier
*/
func (a *Client) GetInstrumentIdentifierPaymentInstrumentsList(params *GetInstrumentIdentifierPaymentInstrumentsListParams, opts ...ClientOption) (*GetInstrumentIdentifierPaymentInstrumentsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstrumentIdentifierPaymentInstrumentsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstrumentIdentifierPaymentInstrumentsList",
		Method:             "GET",
		PathPattern:        "/tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/paymentinstruments",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstrumentIdentifierPaymentInstrumentsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstrumentIdentifierPaymentInstrumentsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstrumentIdentifierPaymentInstrumentsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchInstrumentIdentifier updates an instrument identifier
*/
func (a *Client) PatchInstrumentIdentifier(params *PatchInstrumentIdentifierParams, opts ...ClientOption) (*PatchInstrumentIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchInstrumentIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchInstrumentIdentifier",
		Method:             "PATCH",
		PathPattern:        "/tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchInstrumentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchInstrumentIdentifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchInstrumentIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostInstrumentIdentifier creates an instrument identifier
*/
func (a *Client) PostInstrumentIdentifier(params *PostInstrumentIdentifierParams, opts ...ClientOption) (*PostInstrumentIdentifierOK, *PostInstrumentIdentifierCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstrumentIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postInstrumentIdentifier",
		Method:             "POST",
		PathPattern:        "/tms/v1/instrumentidentifiers",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInstrumentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostInstrumentIdentifierOK:
		return value, nil, nil
	case *PostInstrumentIdentifierCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instrument_identifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostInstrumentIdentifierEnrollment enrolls an instrument identifier for network tokenization
*/
func (a *Client) PostInstrumentIdentifierEnrollment(params *PostInstrumentIdentifierEnrollmentParams, opts ...ClientOption) (*PostInstrumentIdentifierEnrollmentAccepted, *PostInstrumentIdentifierEnrollmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstrumentIdentifierEnrollmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postInstrumentIdentifierEnrollment",
		Method:             "POST",
		PathPattern:        "/tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInstrumentIdentifierEnrollmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostInstrumentIdentifierEnrollmentAccepted:
		return value, nil, nil
	case *PostInstrumentIdentifierEnrollmentNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instrument_identifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
