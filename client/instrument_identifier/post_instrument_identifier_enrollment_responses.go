// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostInstrumentIdentifierEnrollmentReader is a Reader for the PostInstrumentIdentifierEnrollment structure.
type PostInstrumentIdentifierEnrollmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostInstrumentIdentifierEnrollmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostInstrumentIdentifierEnrollmentAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPostInstrumentIdentifierEnrollmentNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostInstrumentIdentifierEnrollmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostInstrumentIdentifierEnrollmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostInstrumentIdentifierEnrollmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPostInstrumentIdentifierEnrollmentGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewPostInstrumentIdentifierEnrollmentFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostInstrumentIdentifierEnrollmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostInstrumentIdentifierEnrollmentAccepted creates a PostInstrumentIdentifierEnrollmentAccepted with default headers values
func NewPostInstrumentIdentifierEnrollmentAccepted() *PostInstrumentIdentifierEnrollmentAccepted {
	return &PostInstrumentIdentifierEnrollmentAccepted{}
}

/* PostInstrumentIdentifierEnrollmentAccepted describes a response with status code 202, with default header values.

The request has been accepted for processing, but the processing has not been completed.
*/
type PostInstrumentIdentifierEnrollmentAccepted struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string
}

func (o *PostInstrumentIdentifierEnrollmentAccepted) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment][%d] postInstrumentIdentifierEnrollmentAccepted ", 202)
}

func (o *PostInstrumentIdentifierEnrollmentAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	return nil
}

// NewPostInstrumentIdentifierEnrollmentNoContent creates a PostInstrumentIdentifierEnrollmentNoContent with default headers values
func NewPostInstrumentIdentifierEnrollmentNoContent() *PostInstrumentIdentifierEnrollmentNoContent {
	return &PostInstrumentIdentifierEnrollmentNoContent{}
}

/* PostInstrumentIdentifierEnrollmentNoContent describes a response with status code 204, with default header values.

The  request is fulfilled but does not need to return a body
*/
type PostInstrumentIdentifierEnrollmentNoContent struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string
}

func (o *PostInstrumentIdentifierEnrollmentNoContent) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment][%d] postInstrumentIdentifierEnrollmentNoContent ", 204)
}

func (o *PostInstrumentIdentifierEnrollmentNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	return nil
}

// NewPostInstrumentIdentifierEnrollmentBadRequest creates a PostInstrumentIdentifierEnrollmentBadRequest with default headers values
func NewPostInstrumentIdentifierEnrollmentBadRequest() *PostInstrumentIdentifierEnrollmentBadRequest {
	return &PostInstrumentIdentifierEnrollmentBadRequest{}
}

/* PostInstrumentIdentifierEnrollmentBadRequest describes a response with status code 400, with default header values.

Bad Request: e.g. A required header value could be missing.
*/
type PostInstrumentIdentifierEnrollmentBadRequest struct {

	/* A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostInstrumentIdentifierEnrollmentBadRequestBody
}

func (o *PostInstrumentIdentifierEnrollmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment][%d] postInstrumentIdentifierEnrollmentBadRequest  %+v", 400, o.Payload)
}
func (o *PostInstrumentIdentifierEnrollmentBadRequest) GetPayload() *PostInstrumentIdentifierEnrollmentBadRequestBody {
	return o.Payload
}

func (o *PostInstrumentIdentifierEnrollmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostInstrumentIdentifierEnrollmentBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostInstrumentIdentifierEnrollmentForbidden creates a PostInstrumentIdentifierEnrollmentForbidden with default headers values
func NewPostInstrumentIdentifierEnrollmentForbidden() *PostInstrumentIdentifierEnrollmentForbidden {
	return &PostInstrumentIdentifierEnrollmentForbidden{}
}

/* PostInstrumentIdentifierEnrollmentForbidden describes a response with status code 403, with default header values.

403ForbiddenResponse: e.g. The profile might not have permission to perform the operation.
*/
type PostInstrumentIdentifierEnrollmentForbidden struct {

	/* A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostInstrumentIdentifierEnrollmentForbiddenBody
}

func (o *PostInstrumentIdentifierEnrollmentForbidden) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment][%d] postInstrumentIdentifierEnrollmentForbidden  %+v", 403, o.Payload)
}
func (o *PostInstrumentIdentifierEnrollmentForbidden) GetPayload() *PostInstrumentIdentifierEnrollmentForbiddenBody {
	return o.Payload
}

func (o *PostInstrumentIdentifierEnrollmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostInstrumentIdentifierEnrollmentForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostInstrumentIdentifierEnrollmentNotFound creates a PostInstrumentIdentifierEnrollmentNotFound with default headers values
func NewPostInstrumentIdentifierEnrollmentNotFound() *PostInstrumentIdentifierEnrollmentNotFound {
	return &PostInstrumentIdentifierEnrollmentNotFound{}
}

/* PostInstrumentIdentifierEnrollmentNotFound describes a response with status code 404, with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type PostInstrumentIdentifierEnrollmentNotFound struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostInstrumentIdentifierEnrollmentNotFoundBody
}

func (o *PostInstrumentIdentifierEnrollmentNotFound) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment][%d] postInstrumentIdentifierEnrollmentNotFound  %+v", 404, o.Payload)
}
func (o *PostInstrumentIdentifierEnrollmentNotFound) GetPayload() *PostInstrumentIdentifierEnrollmentNotFoundBody {
	return o.Payload
}

func (o *PostInstrumentIdentifierEnrollmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostInstrumentIdentifierEnrollmentNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostInstrumentIdentifierEnrollmentGone creates a PostInstrumentIdentifierEnrollmentGone with default headers values
func NewPostInstrumentIdentifierEnrollmentGone() *PostInstrumentIdentifierEnrollmentGone {
	return &PostInstrumentIdentifierEnrollmentGone{}
}

/* PostInstrumentIdentifierEnrollmentGone describes a response with status code 410, with default header values.

Token Not Available. The token has been deleted.
*/
type PostInstrumentIdentifierEnrollmentGone struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostInstrumentIdentifierEnrollmentGoneBody
}

func (o *PostInstrumentIdentifierEnrollmentGone) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment][%d] postInstrumentIdentifierEnrollmentGone  %+v", 410, o.Payload)
}
func (o *PostInstrumentIdentifierEnrollmentGone) GetPayload() *PostInstrumentIdentifierEnrollmentGoneBody {
	return o.Payload
}

func (o *PostInstrumentIdentifierEnrollmentGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostInstrumentIdentifierEnrollmentGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostInstrumentIdentifierEnrollmentFailedDependency creates a PostInstrumentIdentifierEnrollmentFailedDependency with default headers values
func NewPostInstrumentIdentifierEnrollmentFailedDependency() *PostInstrumentIdentifierEnrollmentFailedDependency {
	return &PostInstrumentIdentifierEnrollmentFailedDependency{}
}

/* PostInstrumentIdentifierEnrollmentFailedDependency describes a response with status code 424, with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type PostInstrumentIdentifierEnrollmentFailedDependency struct {

	/* A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostInstrumentIdentifierEnrollmentFailedDependencyBody
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependency) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment][%d] postInstrumentIdentifierEnrollmentFailedDependency  %+v", 424, o.Payload)
}
func (o *PostInstrumentIdentifierEnrollmentFailedDependency) GetPayload() *PostInstrumentIdentifierEnrollmentFailedDependencyBody {
	return o.Payload
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostInstrumentIdentifierEnrollmentFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostInstrumentIdentifierEnrollmentInternalServerError creates a PostInstrumentIdentifierEnrollmentInternalServerError with default headers values
func NewPostInstrumentIdentifierEnrollmentInternalServerError() *PostInstrumentIdentifierEnrollmentInternalServerError {
	return &PostInstrumentIdentifierEnrollmentInternalServerError{}
}

/* PostInstrumentIdentifierEnrollmentInternalServerError describes a response with status code 500, with default header values.

Unexpected error.
*/
type PostInstrumentIdentifierEnrollmentInternalServerError struct {

	/* A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	/* The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *PostInstrumentIdentifierEnrollmentInternalServerErrorBody
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}/enrollment][%d] postInstrumentIdentifierEnrollmentInternalServerError  %+v", 500, o.Payload)
}
func (o *PostInstrumentIdentifierEnrollmentInternalServerError) GetPayload() *PostInstrumentIdentifierEnrollmentInternalServerErrorBody {
	return o.Payload
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// hydrates response header v-c-correlation-id
	hdrVcCorrelationID := response.GetHeader("v-c-correlation-id")

	if hdrVcCorrelationID != "" {
		o.VcCorrelationID = hdrVcCorrelationID
	}

	o.Payload = new(PostInstrumentIdentifierEnrollmentInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostInstrumentIdentifierEnrollmentBadRequestBody post instrument identifier enrollment bad request body
swagger:model PostInstrumentIdentifierEnrollmentBadRequestBody
*/
type PostInstrumentIdentifierEnrollmentBadRequestBody struct {

	// errors
	// Read Only: true
	Errors []*PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post instrument identifier enrollment bad request body
func (o *PostInstrumentIdentifierEnrollmentBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBadRequestBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment bad request body based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBadRequestBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentBadRequest"+"."+"errors", "body", []*PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {
			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0 post instrument identifier enrollment bad request body errors items0
swagger:model PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0
*/
type PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post instrument identifier enrollment bad request body errors items0
func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment bad request body errors items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0 post instrument identifier enrollment bad request body errors items0 details items0
swagger:model PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0
*/
type PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this post instrument identifier enrollment bad request body errors items0 details items0
func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment bad request body errors items0 details items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentBadRequestBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentBody post instrument identifier enrollment body
swagger:model PostInstrumentIdentifierEnrollmentBody
*/
type PostInstrumentIdentifierEnrollmentBody struct {

	// links
	Links *PostInstrumentIdentifierEnrollmentParamsBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *PostInstrumentIdentifierEnrollmentParamsBodyBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *PostInstrumentIdentifierEnrollmentParamsBodyBillTo `json:"billTo,omitempty"`

	// card
	Card *PostInstrumentIdentifierEnrollmentParamsBodyCard `json:"card,omitempty"`

	// The id of the Instrument Identifier Token.
	//
	ID string `json:"id,omitempty"`

	// issuer
	Issuer *PostInstrumentIdentifierEnrollmentParamsBodyIssuer `json:"issuer,omitempty"`

	// metadata
	Metadata *PostInstrumentIdentifierEnrollmentParamsBodyMetadata `json:"metadata,omitempty"`

	// The type of token.
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Example: instrumentIdentifier
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Example: ACTIVE
	// Read Only: true
	State string `json:"state,omitempty"`

	// tokenized card
	TokenizedCard *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard `json:"tokenizedCard,omitempty"`

	// The type of Instrument Identifier.
	// Valid values:
	// - enrollable card
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this post instrument identifier enrollment body
func (o *PostInstrumentIdentifierEnrollmentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) validateBankAccount(formats strfmt.Registry) error {
	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) validateBillTo(formats strfmt.Registry) error {
	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) validateIssuer(formats strfmt.Registry) error {
	if swag.IsZero(o.Issuer) { // not required
		return nil
	}

	if o.Issuer != nil {
		if err := o.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) validateProcessingInformation(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) validateTokenizedCard(formats strfmt.Registry) error {
	if swag.IsZero(o.TokenizedCard) { // not required
		return nil
	}

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment body based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBankAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBillTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIssuer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProcessingInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTokenizedCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if o.Links != nil {
		if err := o.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateBankAccount(ctx context.Context, formats strfmt.Registry) error {

	if o.BankAccount != nil {
		if err := o.BankAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "bankAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateBillTo(ctx context.Context, formats strfmt.Registry) error {

	if o.BillTo != nil {
		if err := o.BillTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "billTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {
		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateIssuer(ctx context.Context, formats strfmt.Registry) error {

	if o.Issuer != nil {
		if err := o.Issuer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {
		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"object", "body", string(o.Object)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateProcessingInformation(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"state", "body", string(o.State)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentBody) contextValidateTokenizedCard(ctx context.Context, formats strfmt.Registry) error {

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "tokenizedCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentBody) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentFailedDependencyBody post instrument identifier enrollment failed dependency body
swagger:model PostInstrumentIdentifierEnrollmentFailedDependencyBody
*/
type PostInstrumentIdentifierEnrollmentFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post instrument identifier enrollment failed dependency body
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment failed dependency body based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentFailedDependency"+"."+"errors", "body", []*PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {
			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0 post instrument identifier enrollment failed dependency body errors items0
swagger:model PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0
*/
type PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post instrument identifier enrollment failed dependency body errors items0
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment failed dependency body errors items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0 post instrument identifier enrollment failed dependency body errors items0 details items0
swagger:model PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0
*/
type PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this post instrument identifier enrollment failed dependency body errors items0 details items0
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment failed dependency body errors items0 details items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentFailedDependencyBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentForbiddenBody post instrument identifier enrollment forbidden body
swagger:model PostInstrumentIdentifierEnrollmentForbiddenBody
*/
type PostInstrumentIdentifierEnrollmentForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post instrument identifier enrollment forbidden body
func (o *PostInstrumentIdentifierEnrollmentForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentForbiddenBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment forbidden body based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentForbiddenBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentForbidden"+"."+"errors", "body", []*PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {
			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0 post instrument identifier enrollment forbidden body errors items0
swagger:model PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0
*/
type PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post instrument identifier enrollment forbidden body errors items0
func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment forbidden body errors items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0 post instrument identifier enrollment forbidden body errors items0 details items0
swagger:model PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0
*/
type PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this post instrument identifier enrollment forbidden body errors items0 details items0
func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment forbidden body errors items0 details items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentForbiddenBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentGoneBody post instrument identifier enrollment gone body
swagger:model PostInstrumentIdentifierEnrollmentGoneBody
*/
type PostInstrumentIdentifierEnrollmentGoneBody struct {

	// errors
	// Read Only: true
	Errors []*PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post instrument identifier enrollment gone body
func (o *PostInstrumentIdentifierEnrollmentGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentGoneBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment gone body based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentGoneBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentGoneBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentGone"+"."+"errors", "body", []*PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {
			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentGone" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentGoneBody) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0 post instrument identifier enrollment gone body errors items0
swagger:model PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0
*/
type PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post instrument identifier enrollment gone body errors items0
func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment gone body errors items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0 post instrument identifier enrollment gone body errors items0 details items0
swagger:model PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0
*/
type PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this post instrument identifier enrollment gone body errors items0 details items0
func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment gone body errors items0 details items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentGoneBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentInternalServerErrorBody post instrument identifier enrollment internal server error body
swagger:model PostInstrumentIdentifierEnrollmentInternalServerErrorBody
*/
type PostInstrumentIdentifierEnrollmentInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post instrument identifier enrollment internal server error body
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment internal server error body based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentInternalServerError"+"."+"errors", "body", []*PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {
			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0 post instrument identifier enrollment internal server error body errors items0
swagger:model PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0
*/
type PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post instrument identifier enrollment internal server error body errors items0
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment internal server error body errors items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0 post instrument identifier enrollment internal server error body errors items0 details items0
swagger:model PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0
*/
type PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this post instrument identifier enrollment internal server error body errors items0 details items0
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment internal server error body errors items0 details items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentInternalServerErrorBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentNotFoundBody post instrument identifier enrollment not found body
swagger:model PostInstrumentIdentifierEnrollmentNotFoundBody
*/
type PostInstrumentIdentifierEnrollmentNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this post instrument identifier enrollment not found body
func (o *PostInstrumentIdentifierEnrollmentNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentNotFoundBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment not found body based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentNotFoundBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentNotFound"+"."+"errors", "body", []*PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0(o.Errors)); err != nil {
		return err
	}

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {
			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postInstrumentIdentifierEnrollmentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postInstrumentIdentifierEnrollmentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0 post instrument identifier enrollment not found body errors items0
swagger:model PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0
*/
type PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post instrument identifier enrollment not found body errors items0
func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment not found body errors items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "details", "body", []*PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0(o.Details)); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0 post instrument identifier enrollment not found body errors items0 details items0
swagger:model PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0
*/
type PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this post instrument identifier enrollment not found body errors items0 details items0
func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment not found body errors items0 details items0 based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "location", "body", string(o.Location)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentNotFoundBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyBankAccount post instrument identifier enrollment params body bank account
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyBankAccount
*/
type PostInstrumentIdentifierEnrollmentParamsBodyBankAccount struct {

	// Account number.
	//
	// When processing encoded account numbers, use this field for the encoded account number.
	//
	// Max Length: 17
	Number string `json:"number,omitempty"`

	// Bank routing number. This is also called the transit number.
	//
	// For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body bank account
func (o *PostInstrumentIdentifierEnrollmentParamsBodyBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyBankAccount) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"bankAccount"+"."+"number", "body", o.Number, 17); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post instrument identifier enrollment params body bank account based on context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyBankAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyBillTo This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyBillTo
*/
type PostInstrumentIdentifierEnrollmentParamsBodyBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body bill to
func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) validateAddress1(formats strfmt.Registry) error {
	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"billTo"+"."+"address1", "body", o.Address1, 60); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) validateAddress2(formats strfmt.Registry) error {
	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"billTo"+"."+"address2", "body", o.Address2, 60); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) validateAdministrativeArea(formats strfmt.Registry) error {
	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"billTo"+"."+"administrativeArea", "body", o.AdministrativeArea, 20); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"billTo"+"."+"country", "body", o.Country, 2); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"billTo"+"."+"locality", "body", o.Locality, 50); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"billTo"+"."+"postalCode", "body", o.PostalCode, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post instrument identifier enrollment params body bill to based on context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyBillTo) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyCard The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyCard
*/
type PostInstrumentIdentifierEnrollmentParamsBodyCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`

	// Card Verification Number.
	//
	// Max Length: 4
	SecurityCode string `json:"securityCode,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body card
func (o *PostInstrumentIdentifierEnrollmentParamsBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyCard) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("postInstrumentIdentifierEnrollmentRequest"+"."+"card"+"."+"number", "body", o.Number, 12); err != nil {
		return err
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"card"+"."+"number", "body", o.Number, 19); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyCard) validateSecurityCode(formats strfmt.Registry) error {
	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"card"+"."+"securityCode", "body", o.SecurityCode, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post instrument identifier enrollment params body card based on context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyCard) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyIssuer post instrument identifier enrollment params body issuer
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyIssuer
*/
type PostInstrumentIdentifierEnrollmentParamsBodyIssuer struct {

	// This reference number serves as a link to the cardholder account and to all transactions for that account.
	//
	// Read Only: true
	// Max Length: 32
	PaymentAccountReference string `json:"paymentAccountReference,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body issuer
func (o *PostInstrumentIdentifierEnrollmentParamsBodyIssuer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentAccountReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyIssuer) validatePaymentAccountReference(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentAccountReference) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"issuer"+"."+"paymentAccountReference", "body", o.PaymentAccountReference, 32); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body issuer based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyIssuer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentAccountReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyIssuer) contextValidatePaymentAccountReference(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"issuer"+"."+"paymentAccountReference", "body", string(o.PaymentAccountReference)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyIssuer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyIssuer) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyLinks post instrument identifier enrollment params body links
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyLinks
*/
type PostInstrumentIdentifierEnrollmentParamsBodyLinks struct {

	// payment instruments
	PaymentInstruments *PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body links
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinks) validatePaymentInstruments(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	if o.PaymentInstruments != nil {
		if err := o.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinks) validateSelf(formats strfmt.Registry) error {
	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body links based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentInstruments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSelf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinks) contextValidatePaymentInstruments(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstruments != nil {
		if err := o.PaymentInstruments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinks) contextValidateSelf(ctx context.Context, formats strfmt.Registry) error {

	if o.Self != nil {
		if err := o.Self.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links" + "." + "self")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinks) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments post instrument identifier enrollment params body links payment instruments
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments
*/
type PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments struct {

	// Link to the Instrument Identifiers Payment Instruments.
	//
	// Example: tms/v1/instrumentidentifiers/9B8D20D13FF328CCE0539399D30A70N4/paymentinstruments
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body links payment instruments
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body links payment instruments based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"_links"+"."+"paymentInstruments"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf post instrument identifier enrollment params body links self
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf
*/
type PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf struct {

	// Link to the Instrument Identifier.
	//
	// Example: tms/v1/instrumentidentifiers/9B8D20D13FF328CCE0539399D30A70N4
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body links self
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body links self based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHref(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf) contextValidateHref(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"_links"+"."+"self"+"."+"href", "body", string(o.Href)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyMetadata post instrument identifier enrollment params body metadata
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyMetadata
*/
type PostInstrumentIdentifierEnrollmentParamsBodyMetadata struct {

	// The creator of the Instrument Identifier token.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body metadata
func (o *PostInstrumentIdentifierEnrollmentParamsBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body metadata based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyMetadata) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"metadata"+"."+"creator", "body", string(o.Creator)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyMetadata) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation post instrument identifier enrollment params body processing information
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation
*/
type PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body processing information
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body processing information based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthorizationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation) contextValidateAuthorizationOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions post instrument identifier enrollment params body processing information authorization options
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions
*/
type PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body processing information authorization options
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body processing information authorization options based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInitiator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions) contextValidateInitiator(ctx context.Context, formats strfmt.Registry) error {

	if o.Initiator != nil {
		if err := o.Initiator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator post instrument identifier enrollment params body processing information authorization options initiator
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator
*/
type PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body processing information authorization options initiator
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {
	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body processing information authorization options initiator based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMerchantInitiatedTransaction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator) contextValidateMerchantInitiatedTransaction(ctx context.Context, formats strfmt.Registry) error {

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction post instrument identifier enrollment params body processing information authorization options initiator merchant initiated transaction
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_
	// in the reply message for either the original merchant-initiated payment in the series or the previous
	// merchant-initiated payment in the series.
	//
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body processing information authorization options initiator merchant initiated transaction
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", o.PreviousTransactionID, 15); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post instrument identifier enrollment params body processing information authorization options initiator merchant initiated transaction based on context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard post instrument identifier enrollment params body tokenized card
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard
*/
type PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard struct {

	// card
	Card *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard `json:"card,omitempty"`

	// Generated value used in conjunction with the network token for making a payment.
	//
	// Example: CgAFRFYFPTFOfg5rj2ais9wQAAAAAM=
	// Read Only: true
	Cryptogram string `json:"cryptogram,omitempty"`

	// Two-digit month in which the network token expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the network token expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The token requestors customer’s payment network token
	//
	// Read Only: true
	Number string `json:"number,omitempty"`

	// Issuers state for the network token
	// Valid values:
	// - ACTIVE
	// - SUSPENDED : This state can change to ACTIVE or DELETED.
	// - DELETED : This is a final state for the network token.
	//
	// Example: ACTIVE
	// Read Only: true
	State string `json:"state,omitempty"`

	// The network token card association brand
	// Valid values:
	// - visa
	// - mastercard
	//
	// Example: visa
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body tokenized card
func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) validateCard(formats strfmt.Registry) error {
	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "tokenizedCard" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body tokenized card based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCryptogram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationYear(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) contextValidateCard(ctx context.Context, formats strfmt.Registry) error {

	if o.Card != nil {
		if err := o.Card.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "tokenizedCard" + "." + "card")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postInstrumentIdentifierEnrollmentRequest" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) contextValidateCryptogram(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"cryptogram", "body", string(o.Cryptogram)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) contextValidateExpirationMonth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"expirationMonth", "body", string(o.ExpirationMonth)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) contextValidateExpirationYear(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"expirationYear", "body", string(o.ExpirationYear)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) contextValidateNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"number", "body", string(o.Number)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"state", "body", string(o.State)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"type", "body", string(o.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard The latest card details associated with the network token
swagger:model PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard
*/
type PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard struct {

	//
	// Two-digit month in which the customer’s latest payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the customer’s latest payment card expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s latest payment card number suffix
	//
	// Example: 1111
	// Read Only: true
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this post instrument identifier enrollment params body tokenized card card
func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) validateExpirationMonth(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", o.ExpirationMonth, 2); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) validateExpirationYear(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", o.ExpirationYear, 4); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post instrument identifier enrollment params body tokenized card card based on the context it is used
func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExpirationMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateExpirationYear(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSuffix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) contextValidateExpirationMonth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) contextValidateExpirationYear(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear)); err != nil {
		return err
	}

	return nil
}

func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) contextValidateSuffix(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "postInstrumentIdentifierEnrollmentRequest"+"."+"tokenizedCard"+"."+"card"+"."+"suffix", "body", string(o.Suffix)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard) UnmarshalBinary(b []byte) error {
	var res PostInstrumentIdentifierEnrollmentParamsBodyTokenizedCardCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
