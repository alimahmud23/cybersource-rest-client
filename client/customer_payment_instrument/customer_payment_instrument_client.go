// Code generated by go-swagger; DO NOT EDIT.

package customer_payment_instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer payment instrument API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer payment instrument API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCustomerPaymentInstrument(params *DeleteCustomerPaymentInstrumentParams, opts ...ClientOption) (*DeleteCustomerPaymentInstrumentNoContent, error)

	GetCustomerPaymentInstrument(params *GetCustomerPaymentInstrumentParams, opts ...ClientOption) (*GetCustomerPaymentInstrumentOK, error)

	GetCustomerPaymentInstrumentsList(params *GetCustomerPaymentInstrumentsListParams, opts ...ClientOption) (*GetCustomerPaymentInstrumentsListOK, error)

	PatchCustomersPaymentInstrument(params *PatchCustomersPaymentInstrumentParams, opts ...ClientOption) (*PatchCustomersPaymentInstrumentOK, error)

	PostCustomerPaymentInstrument(params *PostCustomerPaymentInstrumentParams, opts ...ClientOption) (*PostCustomerPaymentInstrumentCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCustomerPaymentInstrument deletes a customer payment instrument
*/
func (a *Client) DeleteCustomerPaymentInstrument(params *DeleteCustomerPaymentInstrumentParams, opts ...ClientOption) (*DeleteCustomerPaymentInstrumentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomerPaymentInstrumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCustomerPaymentInstrument",
		Method:             "DELETE",
		PathPattern:        "/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomerPaymentInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomerPaymentInstrumentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomerPaymentInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCustomerPaymentInstrument retrieves a customer payment instrument
*/
func (a *Client) GetCustomerPaymentInstrument(params *GetCustomerPaymentInstrumentParams, opts ...ClientOption) (*GetCustomerPaymentInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerPaymentInstrumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomerPaymentInstrument",
		Method:             "GET",
		PathPattern:        "/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomerPaymentInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomerPaymentInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomerPaymentInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCustomerPaymentInstrumentsList lists payment instruments for a customer
*/
func (a *Client) GetCustomerPaymentInstrumentsList(params *GetCustomerPaymentInstrumentsListParams, opts ...ClientOption) (*GetCustomerPaymentInstrumentsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerPaymentInstrumentsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomerPaymentInstrumentsList",
		Method:             "GET",
		PathPattern:        "/tms/v2/customers/{customerTokenId}/payment-instruments",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomerPaymentInstrumentsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomerPaymentInstrumentsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomerPaymentInstrumentsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCustomersPaymentInstrument updates a customer payment instrument
*/
func (a *Client) PatchCustomersPaymentInstrument(params *PatchCustomersPaymentInstrumentParams, opts ...ClientOption) (*PatchCustomersPaymentInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCustomersPaymentInstrumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchCustomersPaymentInstrument",
		Method:             "PATCH",
		PathPattern:        "/tms/v2/customers/{customerTokenId}/payment-instruments/{paymentInstrumentTokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCustomersPaymentInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCustomersPaymentInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCustomersPaymentInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostCustomerPaymentInstrument creates a customer payment instrument

  Include an existing TMS Customer & Instrument Identifier token id in the request.
* A Customer token can be created by calling: **POST [*]/tms/v2/customers***
* An Instrument Identifier token can be created by calling: **POST [*]/tms/v1/instrumentidentifiers***

*/
func (a *Client) PostCustomerPaymentInstrument(params *PostCustomerPaymentInstrumentParams, opts ...ClientOption) (*PostCustomerPaymentInstrumentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomerPaymentInstrumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postCustomerPaymentInstrument",
		Method:             "POST",
		PathPattern:        "/tms/v2/customers/{customerTokenId}/payment-instruments",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCustomerPaymentInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCustomerPaymentInstrumentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postCustomerPaymentInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
