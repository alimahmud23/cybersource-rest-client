// Code generated by go-swagger; DO NOT EDIT.

package report_subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteSubscriptionReader is a Reader for the DeleteSubscription structure.
type DeleteSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSubscriptionOK creates a DeleteSubscriptionOK with default headers values
func NewDeleteSubscriptionOK() *DeleteSubscriptionOK {
	return &DeleteSubscriptionOK{}
}

/* DeleteSubscriptionOK describes a response with status code 200, with default header values.

Ok
*/
type DeleteSubscriptionOK struct {
}

func (o *DeleteSubscriptionOK) Error() string {
	return fmt.Sprintf("[DELETE /reporting/v3/report-subscriptions/{reportName}][%d] deleteSubscriptionOK ", 200)
}

func (o *DeleteSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSubscriptionBadRequest creates a DeleteSubscriptionBadRequest with default headers values
func NewDeleteSubscriptionBadRequest() *DeleteSubscriptionBadRequest {
	return &DeleteSubscriptionBadRequest{}
}

/* DeleteSubscriptionBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type DeleteSubscriptionBadRequest struct {
	Payload *DeleteSubscriptionBadRequestBody
}

func (o *DeleteSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /reporting/v3/report-subscriptions/{reportName}][%d] deleteSubscriptionBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteSubscriptionBadRequest) GetPayload() *DeleteSubscriptionBadRequestBody {
	return o.Payload
}

func (o *DeleteSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSubscriptionBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionNotFound creates a DeleteSubscriptionNotFound with default headers values
func NewDeleteSubscriptionNotFound() *DeleteSubscriptionNotFound {
	return &DeleteSubscriptionNotFound{}
}

/* DeleteSubscriptionNotFound describes a response with status code 404, with default header values.

Subscription not found
*/
type DeleteSubscriptionNotFound struct {
	Payload *DeleteSubscriptionNotFoundBody
}

func (o *DeleteSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /reporting/v3/report-subscriptions/{reportName}][%d] deleteSubscriptionNotFound  %+v", 404, o.Payload)
}
func (o *DeleteSubscriptionNotFound) GetPayload() *DeleteSubscriptionNotFoundBody {
	return o.Payload
}

func (o *DeleteSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteSubscriptionNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteSubscriptionBadRequestBody reportingV3ReportSubscriptionsNameDelete400Response
//
// HTTP status code for client application
swagger:model DeleteSubscriptionBadRequestBody
*/
type DeleteSubscriptionBadRequestBody struct {

	// Error field list
	//
	// Required: true
	Details []*DeleteSubscriptionBadRequestBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this delete subscription bad request body
func (o *DeleteSubscriptionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSubscriptionBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("deleteSubscriptionBadRequest"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DeleteSubscriptionBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSubscriptionBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *DeleteSubscriptionBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("deleteSubscriptionBadRequest"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *DeleteSubscriptionBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("deleteSubscriptionBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("deleteSubscriptionBadRequest"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this delete subscription bad request body based on the context it is used
func (o *DeleteSubscriptionBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSubscriptionBadRequestBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSubscriptionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSubscriptionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteSubscriptionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSubscriptionBadRequestBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model DeleteSubscriptionBadRequestBodyDetailsItems0
*/
type DeleteSubscriptionBadRequestBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this delete subscription bad request body details items0
func (o *DeleteSubscriptionBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete subscription bad request body details items0 based on context it is used
func (o *DeleteSubscriptionBadRequestBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSubscriptionBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSubscriptionBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteSubscriptionBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSubscriptionNotFoundBody reportingV3ReportSubscriptionsnameDelete404Response
//
// HTTP status code for client application
swagger:model DeleteSubscriptionNotFoundBody
*/
type DeleteSubscriptionNotFoundBody struct {

	// Error field list
	//
	// Required: true
	Details []*DeleteSubscriptionNotFoundBodyDetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Example: One or more fields contains invalid data
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Example: INVALID_DATA
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Example: 2016-08-11T22:47:57Z
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this delete subscription not found body
func (o *DeleteSubscriptionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSubscriptionNotFoundBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("deleteSubscriptionNotFound"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteSubscriptionNotFound" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteSubscriptionNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DeleteSubscriptionNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("deleteSubscriptionNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *DeleteSubscriptionNotFoundBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("deleteSubscriptionNotFound"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *DeleteSubscriptionNotFoundBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("deleteSubscriptionNotFound"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("deleteSubscriptionNotFound"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this delete subscription not found body based on the context it is used
func (o *DeleteSubscriptionNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSubscriptionNotFoundBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteSubscriptionNotFound" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deleteSubscriptionNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSubscriptionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSubscriptionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteSubscriptionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteSubscriptionNotFoundBodyDetailsItems0 Provides failed validation input field detail
//
swagger:model DeleteSubscriptionNotFoundBodyDetailsItems0
*/
type DeleteSubscriptionNotFoundBodyDetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this delete subscription not found body details items0
func (o *DeleteSubscriptionNotFoundBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete subscription not found body details items0 based on context it is used
func (o *DeleteSubscriptionNotFoundBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSubscriptionNotFoundBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSubscriptionNotFoundBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteSubscriptionNotFoundBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
